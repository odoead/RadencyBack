name: CI/CD Deploy Backend to Azure Container Apps

on:
  push:
  # Only on master branch
    branches:
      - master

env:
  # your Azure resources
  
  #backend
  ACR_NAME: acrcoworkingprod
  ACR_LOGIN_SERVER: acrcoworkingprod.azurecr.io
  RESOURCE_GROUP: rg-coworking-prod
  CONTAINERAPP_NAME: app-coworking-api
  
  #frontend
  STATIC_WEB_APP_NAME: app-coworking-front

jobs:
  ## ─── 1) build & push backend────────────────────────────────────────────────────────-── 
  build-backend:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-output.outputs.image }}
    steps:
      - name:  Checkout code
        uses: actions/checkout@v3

      - name:  Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name:  Log in to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Get path
        run: |
          pwd
          ls -la
          find . -type f

      - name:  Build & Push image
        id: build-push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: RadencyBack/RadencyBack/Dockerfile
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/coworking-svc:${{ github.sha }}
        # expose the fully-qualified image ref as a job  output
      - name:  Set output
        id: set-output
        run: echo "image=$ACR_LOGIN_SERVER/coworking-svc:$GITHUB_SHA" >> $GITHUB_OUTPUT
        env:
          ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}
          GITHUB_SHA: ${{ github.sha }}

  ## ─── 2) deploy backend ────────────────────────────────────────────────────────────────
  deploy-backend:
   needs: build-backend
   runs-on: ubuntu-latest
   steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Apps
      uses: azure/container-apps-deploy-action@v1
      with:
        imageToDeploy: ${{ env.ACR_LOGIN_SERVER }}/coworking-svc:${{ github.sha }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        containerAppName: ${{ env.CONTAINERAPP_NAME }}
        environmentVariables: |
          ASPNETCORE_ENVIRONMENT=Production
          DATABASE_CONNECTION_STRING=secretref:database-connection
          ConnectionStrings__DefaultConnection=secretref:database-connection
          AZURE_STATIC_WEB_APPS_URL=secretref:azure-static-web-app-url
#          DATABASE_CONNECTION_STRING=${{ secrets.DATABASE_CONNECTION_STRING }}
#          ConnectionStrings__DefaultConnection=${{ secrets.DATABASE_CONNECTION_STRING }}
#          AZURE_STATIC_WEB_APPS_URL=${{ secrets.AZURE_STATIC_WEB_APPS_URL }}
          
## ─── 3) build deploy frontend ────────────────────────────────────────────────────────────────
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false

      - name: Generate runtime config.json
        run: |
          echo "{ \"coworkingUrl\": \"${COWORKING_URL}\" }" \
            > RadencyFront/src/assets/config.json
        env:
          COWORKING_URL: ${{ secrets.AZURE_CONTAINER_APP_URL }}

      - name: Get path
        run: |
          pwd
          ls -la
          find . -type f

      - name: Build And Deploy to Static Web Apps
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "./RadencyFront"                   
          api_location: ""                             
          output_location: "dist/radency-front/browser"
        
