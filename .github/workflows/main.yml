name: CI/CD Deploy Backend to Azure Container Apps

on:
  push:
  # Only on master branch
    branches:
      - master

env:
  # your Azure resources
  #backend
  ACR_NAME: acrcoworkingprod
  ACR_LOGIN_SERVER: acrcoworkingprod.azurecr.io
  RESOURCE_GROUP: rg-coworking-prod
  CONTAINERAPP_NAME: app-coworking-api
  
  #frontend
  STATIC_WEB_APP_NAME: app-coworking-front

jobs:
  ## ─── 1) build & push backend──────────────────────────────────────────────────────────
  build-backend:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-output.outputs.image }}
    steps:
      - name:  Checkout code
        uses: actions/checkout@v3

      - name:  Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name:  Log in to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name:  Build & Push image
        id: build-push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./RadencyBack/RadencyBack/Dockerfile
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/coworking-svc:${{ github.sha }}
        # expose the fully-qualified image ref as a job output
      - name:  Set output
        id: set-output
        run: echo "image=$ACR_LOGIN_SERVER/coworking-svc:$GITHUB_SHA" >> $GITHUB_OUTPUT
        env:
          ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}
          GITHUB_SHA: ${{ github.sha }}

  ## ─── 2) deploy backend ────────────────────────────────────────────────────────────────
  deploy-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - name:  Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name:  Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with: 
         imageToDeploy: $ACR_LOGIN_SERVER/coworking-svc:$GITHUB_SHA
         resourceGroup: ${{ env.RESOURCE_GROUP }}
         containerAppName: ${{ env.CONTAINERAPP_NAME }}
         environmentVariables: |
           ASPNETCORE_ENVIRONMENT=Production
        
        
## ─── 3) build deploy frontend ────────────────────────────────────────────────────────────────
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./RadencyFront

      - name: Build Angular app (production)
        run: npm run build -- --configuration production
        working-directory: ./RadencyFront
      
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          # Folder where your Angular code lives
          app_location: "./RadencyFront"           
          # No Azure Functions / API in this job, so leave API location blank
          api_location: ""                   
          # The folder containing the production build output
          app_artifact_location: "./RadencyFront/dist"
